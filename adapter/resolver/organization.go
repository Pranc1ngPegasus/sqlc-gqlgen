package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"

	"github.com/Pranc1ngPegasus/sqlc-gqlgen/domain/usecase"
	"github.com/Pranc1ngPegasus/sqlc-gqlgen/graph/model"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.SignupInput) (*model.SignupPayload, error) {
	if err := r.signup.Do(ctx, usecase.SignupInput{
		OrganizationName: input.OrgName,
		UserName:         input.UserName,
	}); err != nil {
		return nil, fmt.Errorf("failed to signup: %w", err)
	}

	return &model.SignupPayload{
		Ok: true,
	}, nil
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context) ([]*model.Organization, error) {
	organizations, err := r.listOrganization.Do(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to list organizations: %w", err)
	}

	var results []*model.Organization
	for _, organization := range organizations {
		results = append(results, &model.Organization{
			ID:        organization.ID.String(),
			CreatedAt: organization.CreatedAt,
			UpdatedAt: organization.UpdatedAt,
			Name:      organization.Name,
		})
	}

	return results, nil
}
